package com.casestudy.mapper;

import com.casestudy.dto.CarDto;
import com.casestudy.dto.ManufacturerDto;
import com.casestudy.dto.ModelDto;
import com.casestudy.entity.Car;
import com.casestudy.entity.Manufacturer;
import com.casestudy.entity.Model;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.Generated;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor",
    date = "2021-04-21T10:29:55+0530",
    comments = "version: 1.3.1.Final, compiler: javac, environment: Java 16 (Oracle Corporation)"
)
public class CarMapperImpl implements CarMapper {

    @Override
    public CarDto carToCarDto(Car car) {
        if ( car == null ) {
            return null;
        }

        CarDto carDto = new CarDto();

        return carDto;
    }

    @Override
    public Car carDtotoCar(CarDto carDto) {
        if ( carDto == null ) {
            return null;
        }

        Car car = new Car();

        return car;
    }

    @Override
    public List<CarDto> carListtoCarDtoList(List<Car> cars) {
        if ( cars == null ) {
            return null;
        }

        List<CarDto> list = new ArrayList<CarDto>( cars.size() );
        for ( Car car : cars ) {
            list.add( carToCarDto( car ) );
        }

        return list;
    }

    @Override
    public ModelDto modelToModelDto(Model model) {
        if ( model == null ) {
            return null;
        }

        ModelDto modelDto = new ModelDto();

        return modelDto;
    }

    @Override
    public Model modelDtoToModel(ModelDto modelDto) {
        if ( modelDto == null ) {
            return null;
        }

        Model model = new Model();

        return model;
    }

    @Override
    public ManufacturerDto manufacturerToManufacturerDto(Manufacturer manufacturer) {
        if ( manufacturer == null ) {
            return null;
        }

        ManufacturerDto manufacturerDto = new ManufacturerDto();

        return manufacturerDto;
    }

    @Override
    public Manufacturer manufacturerDtoToManufacturer(ManufacturerDto manufacturerDto) {
        if ( manufacturerDto == null ) {
            return null;
        }

        Manufacturer manufacturer = new Manufacturer();

        return manufacturer;
    }
}
